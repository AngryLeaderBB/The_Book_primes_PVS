(|series_extra|
 (|Tri_strict_increasing| 0
  (|Tri_strict_increasing-1| NIL 3945953944
   ("" (SKEEP)
    (("" (MEASURE-INDUCT "k" "k")
      (("" (SKEEP)
        (("" (CASE-REPLACE "x = 1")
          (("1" (LEMMA "Tri_rec")
            (("1" (INST -1 "n") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
           ("2" (INST -1 "x-1")
            (("1" (ASSERT)
              (("1" (LEMMA "Tri_rec")
                (("1" (INST -1 "n-1+x") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|Tri| CONST-DECL "nat" |triangle_numbers| |series|)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|Tri_rec| FORMULA-DECL NIL |triangle_numbers| |series|)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK))
 (|Tri_lt| 0
  (|Tri_lt-1| NIL 3945683421
   ("" (SKEEP)
    (("" (CASE-REPLACE "n = k")
      (("1" (ASSERT) NIL NIL)
       ("2" (CASE-REPLACE "n > k")
        (("1" (LEMMA "Tri_strict_increasing")
          (("1" (INST -1 "k" "n-k")
            (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
          NIL)
         ("2" (ASSERT) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|Tri_strict_increasing| FORMULA-DECL NIL |series_extra| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    NIL (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL))
   SHOSTAK))
 (|Tri_le| 0
  (|Tri_le-1| NIL 3945683555
   ("" (SKEEP)
    (("" (LEMMA "Tri_lt")
      (("" (INST -1 "n" "k")
        (("" (ASSERT)
          (("" (CASE "n > k")
            (("1" (LEMMA "Tri_strict_increasing")
              (("1" (INST -1 "k" "n-k") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Tri_lt| FORMULA-DECL NIL |series_extra| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|Tri_strict_increasing| FORMULA-DECL NIL |series_extra| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|lower_inv_triang_TCC1| 0
  (|lower_inv_triang_TCC1-1| NIL 3945518785
   ("" (SKEEP)
    (("" (PROP)
      (("1" (EXPAND "is_finite")
        (("1" (INST 1 "k+1" "LAMBDA(i:({n: nat | Tri(n) <= k})):i")
          (("1" (EXPAND "injective?") (("1" (SKEEP) NIL NIL)) NIL)
           ("2" (SKEEP)
            (("2" (TYPEPRED "i")
              (("2" (LEMMA "Tri_rec")
                (("2" (INST -1 "i-1")
                  (("1" (ASSERT) NIL NIL)
                   ("2" (CASE-REPLACE "i = 0")
                    (("1" (EXPAND "Tri")
                      (("1" (EXPAND "sigma")
                        (("1" (EXPAND "sigma") (("1" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "empty?")
        (("2" (INST -1 "0")
          (("2" (EXPAND "member")
            (("2" (EXPAND "Tri")
              (("2" (EXPAND "sigma")
                (("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|Tri| CONST-DECL "nat" |triangle_numbers| |series|) NIL
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Tri_rec| FORMULA-DECL NIL |triangle_numbers| |series|)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL))
   NIL
   (|lower_inv_triang| SUBTYPE
    "{n: naturalnumbers.nat | reals.<=(triangle_numbers.Tri(n), series_extra.k)}"
    "non_empty_finite_set[nat]")))
 (|triang_num_id| 0
  (|triang_num_id-1| NIL 3945682533
   ("" (SKEEP)
    (("" (EXPAND "lower_inv_triang")
      (("" (CASE "Tri(n) + k < Tri(n+1)")
        (("1" (NAME-REPLACE "m" "max({n_1: nat | Tri(n_1) <= Tri(n) + k})")
          (("1" (TYPEPRED "m")
            (("1" (INST -2 "n")
              (("1" (ASSERT)
                (("1" (CASE "n >= m")
                  (("1" (ASSERT) NIL NIL)
                   ("2" (LEMMA "Tri_lt")
                    (("2" (INST -1 "m" "n+1") (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (PROP)
              (("1" (EXPAND "is_finite")
                (("1"
                  (INST 1 "n+1"
                   "LAMBDA(i:(({n_1: nat | Tri(n_1) <= Tri(n) + k}))):i")
                  (("1" (EXPAND "injective?") (("1" (SKEEP) NIL NIL)) NIL)
                   ("2" (SKEEP)
                    (("2" (TYPEPRED "i")
                      (("2" (LEMMA "Tri_lt")
                        (("2" (INST -1 "i" "n+1") (("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "empty?")
                (("2" (INST -1 "n")
                  (("2" (EXPAND "member") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE 2)
          (("2" (LEMMA "Tri_rec")
            (("2" (INST -1 "n")
              (("2" (TYPEPRED "k") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|lower_inv_triang| CONST-DECL "nat" |series_extra| NIL)
    (|Tri_rec| FORMULA-DECL NIL |triangle_numbers| |series|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|non_empty_finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|max| CONST-DECL "{a: nat | S(a) AND (FORALL x: S(x) IMPLIES x <= a)}"
     |max_finite_set_nat| |ints|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|Tri_lt| FORMULA-DECL NIL |series_extra| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL NIL (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|Tri| CONST-DECL "nat" |triangle_numbers| |series|)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   SHOSTAK))
 (|triang_decomp| 0
  (|triang_decomp-1| NIL 3947161222
   ("" (MEASURE-INDUCT "i" "i")
    (("" (SKEEP)
      (("" (CASE-REPLACE "x = 0")
        (("1" (HIDE -2)
          (("1" (INST 1 "0" "0")
            (("1" (EXPAND "Tri")
              (("1" (EXPAND "sigma")
                (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL)
         ("2" (INST -1 "x-1")
          (("1" (ASSERT)
            (("1" (SKEEP)
              (("1" (CASE "k < n")
                (("1" (INST 2 "n" "k+1")
                  (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)
                 ("2" (CASE-REPLACE "k = n")
                  (("1" (INST 3 "n+1" "0")
                    (("1" (LEMMA "Tri_rec")
                      (("1" (INST -1 "n") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL)
                   ("2" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|x| SKOLEM-CONST-DECL "nat" |series_extra| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Tri_rec| FORMULA-DECL NIL |triangle_numbers| |series|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|k| SKOLEM-CONST-DECL "{k: nat | k <= n}" |series_extra| NIL)
    (|n| SKOLEM-CONST-DECL "nat" |series_extra| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Tri| CONST-DECL "nat" |triangle_numbers| |series|)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|s_prod_idx1_TCC1| 0
  (|s_prod_idx1_TCC1-1| NIL 3945518785 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|lower_inv_triang| CONST-DECL "nat" |series_extra| NIL)
    (|Tri| CONST-DECL "nat" |triangle_numbers| |series|) NIL)
   NIL
   (|s_prod_idx1| SUBTYPE
    "(number_fields.-)(series_extra.i, triangle_numbers.Tri(series_extra.lower_inv_triang(series_extra.i)))"
    "nat")))
 (|s_prod_idx2_TCC1| 0
  (|s_prod_idx2_TCC1-1| NIL 3945518785
   ("" (SKEEP)
    (("" (LEMMA "triang_decomp")
      (("" (INST -1 "i")
        (("" (SKEEP)
          (("" (REPLACES -1)
            (("" (REWRITE "triang_num_id") (("" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|triang_decomp| FORMULA-DECL NIL |series_extra| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|triang_num_id| FORMULA-DECL NIL |series_extra| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL
   (|s_prod_idx2| SUBTYPE
    "(number_fields.+)((number_fields.-)(series_extra.lower_inv_triang(series_extra.i), series_extra.i), triangle_numbers.Tri(series_extra.lower_inv_triang(series_extra.i)))"
    "nat")))
 (|s_prod_idx1_id| 0
  (|s_prod_idx1_id-1| NIL 3947159851
   ("" (SKEEP)
    (("" (EXPAND "s_prod_idx1")
      (("" (REWRITE "triang_num_id") (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|s_prod_idx1| CONST-DECL "nat" |series_extra| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|triang_num_id| FORMULA-DECL NIL |series_extra| NIL))
   SHOSTAK))
 (|s_prod_idx2_id| 0
  (|s_prod_idx2_id-1| NIL 3947159973
   ("" (SKEEP)
    (("" (EXPAND "s_prod_idx2")
      (("" (REWRITE "triang_num_id") (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|s_prod_idx2| CONST-DECL "nat" |series_extra| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|triang_num_id| FORMULA-DECL NIL |series_extra| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   SHOSTAK))
 (|s_prod_identity_TCC1| 0
  (|s_prod_identity_TCC1-1| NIL 3946893937 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|s_prod_identity| SUBTYPE "0" "T_low[below[1 + n]]")))
 (|s_prod_identity_TCC2| 0
  (|s_prod_identity_TCC2-1| NIL 3946893937 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|s_prod_identity| SUBTYPE "series_extra.n" "T_high[below[1 + n]]")))
 (|s_prod_identity_TCC3| 0
  (|s_prod_identity_TCC3-1| NIL 3946893937 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|s_prod_identity| SUBTYPE
    "(number_fields.-)(series_extra.n, series_extra.i)" "nat")))
 (|s_prod_identity_TCC4| 0
  (|s_prod_identity_TCC4-1| NIL 3946893937 ("" (ASSUMING-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|s_prod_identity| ASSUMING "reals@sigma[below[1 + n]].sigma"
    "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))
 (|s_prod_identity| 0
  (|s_prod_identity-1| NIL 3945519083
   ("" (SKEEP)
    ((""
      (CASE "FORALL(k:nat | k <= n):sigma[nat](Tri(n), Tri(n) + k,
            LAMBDA (s: nat): a(s_prod_idx1(s)) * b(s_prod_idx2(s))) = sigma[below[1 + n]](0, k, LAMBDA (i: below[1 + n]): a(i) * b(n - i))")
      (("1" (INST -1 "n") NIL NIL)
       ("2" (HIDE 2)
        (("2" (MEASURE-INDUCT "k" "k")
          (("2" (SKEEP)
            (("2" (CASE-REPLACE "x = 0")
              (("1" (HIDE -2)
                (("1" (EXPAND "sigma")
                  (("1" (EXPAND "sigma")
                    (("1" (EXPAND "s_prod_idx1")
                      (("1" (EXPAND "s_prod_idx2")
                        (("1" (LEMMA "triang_num_id")
                          (("1" (INST -1 "n" "0") (("1" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (INST -1 "x-1")
                (("1" (ASSERT)
                  (("1" (EXPAND "sigma" 2)
                    (("1" (REPLACES -1)
                      (("1" (EXPAND "sigma")
                        (("1" (EXPAND "s_prod_idx1")
                          (("1" (REWRITE "triang_num_id")
                            (("1" (EXPAND "s_prod_idx2")
                              (("1" (REWRITE "triang_num_id")
                                (("1" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|Tri| CONST-DECL "nat" |triangle_numbers| |series|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|s_prod_idx1| CONST-DECL "nat" |series_extra| NIL)
    (|s_prod_idx2| CONST-DECL "nat" |series_extra| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|triang_num_id| FORMULA-DECL NIL |series_extra| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL) NIL NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   SHOSTAK))
 (|s_prod_conv| 0
  (|s_prod_conv-1| NIL 3946033034
   ("" (SKEEP)
    (("" (EXPAND "conv_series?")
      (("" (LEMMA "increasing_bounded_convergence")
        ((""
          (INST -1 "series(LAMBDA (i: nat):
                           a(s_prod_idx1(i)) * b(s_prod_idx2(i)))")
          (("1" (PROP)
            (("1" (EXPAND "convergent?") (("1" (INST?) NIL NIL)) NIL)
             ("2" (HIDE-ALL-BUT 1)
              (("2" (EXPAND "increasing?")
                (("2" (SKEEP)
                  (("2" (EXPAND "series")
                    (("2" (LEMMA "sigma_split_ge")
                      (("2"
                        (INST -1
                         "LAMBDA (i: nat): a(s_prod_idx1(i)) * b(s_prod_idx2(i))"
                         "y" "x" "0")
                        (("2" (ASSERT)
                          (("2" (REPLACES -1) (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (EXPAND "bounded_above?")
              (("2" (INST 1 "inf_sum(a) * inf_sum(b)")
                (("1" (SKEEP)
                  (("1" (LEMMA "s_prod_ineq")
                    (("1" (INST -1 "a" "b" "x")
                      (("1" (ASSERT)
                        (("1" (PROP)
                          (("1" (EXPAND "series") (("1" (PROPAX) NIL NIL)) NIL)
                           ("2" (EXPAND "conv_series?")
                            (("2" (PROPAX) NIL NIL)) NIL)
                           ("3" (EXPAND "conv_series?")
                            (("3" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "conv_series?") (("2" (PROPAX) NIL NIL)) NIL)
                 ("3" (EXPAND "conv_series?") (("3" (PROPAX) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|increasing_bounded_convergence| FORMULA-DECL NIL |convergence_sequences|
     |analysis|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sup| CONST-DECL "real" |real_fun_supinf| |analysis|)
    (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|sigma_split_ge| FORMULA-DECL NIL |sigma_nat| |reals|)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|bounded_above?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|s_prod_idx1| CONST-DECL "nat" |series_extra| NIL)
    (|s_prod_idx2| CONST-DECL "nat" |series_extra| NIL))
   SHOSTAK))
 (|lim_series_product_TCC1| 0
  (|lim_series_product_TCC1-1| NIL 3945518785
   ("" (LEMMA "s_prod_conv")
    (("" (SKEEP)
      (("" (INST?) (("" (EXPAND "conv_series?") (("" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   (NIL
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|s_prod_conv| FORMULA-DECL NIL |series_extra| NIL))
   NIL
   (|lim_series_product| SUBTYPE
    "series.series(LAMBDA (i: naturalnumbers.nat): number_fields.*(series_extra.a(series_extra.s_prod_idx1(i)), series_extra.b(series_extra.s_prod_idx2(i))))"
    "(convergence_sequences.convergent?)")))
 (|lim_series_product| 0
  (|lim_series_product-1| NIL 3945954276
   ("" (SKEEP)
    (("" (REWRITE "limit_prod" :DIR RL)
      (("" (LEMMA "convergence_subsequence")
        ((""
          (INST -1
           "inf_sum(LAMBDA (s: nat): a(s_prod_idx1(s)) * b(s_prod_idx2(s)))"
           "series(LAMBDA (s: nat): a(s_prod_idx1(s)) * b(s_prod_idx2(s)))"
           "series(a) * series(b)")
          (("1" (PROP)
            (("1" (REWRITE "limit_def")
              (("1" (EXPAND "inf_sum") (("1" (PROPAX) NIL NIL)) NIL)) NIL)
             ("2" (HIDE 2)
              (("2" (REWRITE "limit_def" :DIR RL)
                (("1" (EXPAND "inf_sum") (("1" (PROPAX) NIL NIL)) NIL)
                 ("2" (HIDE 2)
                  (("2" (LEMMA "s_prod_conv")
                    (("2" (INST?)
                      (("2" (EXPAND "conv_series?") (("2" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (EXPAND "conv_series?")
                  (("3" (HIDE 2)
                    (("3" (LEMMA "s_prod_conv")
                      (("3" (INST?)
                        (("3" (EXPAND "conv_series?") (("3" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (HIDE 2)
              (("3" (EXPAND "subseq")
                (("3" (INST 1 "lambda(j:nat):Tri(2*j)")
                  (("1" (SKEEP)
                    (("1" (LEMMA "s_prod_equiv")
                      (("1" (INST -1 "a" "b" "i")
                        (("1" (EXPAND "*")
                          (("1" (EXPAND "series" 1) (("1" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "strict_increasing?")
                    (("2" (SKEEP)
                      (("2" (LEMMA "Tri_strict_increasing")
                        (("2" (INST -1 "2*x" "2*(y-x)")
                          (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (EXPAND "conv_series?")
              (("2" (LEMMA "s_prod_conv")
                (("2" (INST -1 "a" "b")
                  (("2" (EXPAND "conv_series?") (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|limit_prod| FORMULA-DECL NIL |convergence_ops| |analysis|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|s_prod_idx2| CONST-DECL "nat" |series_extra| NIL)
    (|s_prod_idx1| CONST-DECL "nat" |series_extra| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|Tri| CONST-DECL "nat" |triangle_numbers| |series|)
    (|strict_increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|extraction| TYPE-EQ-DECL NIL |sequence_props| |analysis|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|Tri_strict_increasing| FORMULA-DECL NIL |series_extra| NIL)
    (|subseq| CONST-DECL "bool" |sequence_props| |analysis|)
    (|s_prod_conv| FORMULA-DECL NIL |series_extra| NIL)
    (|limit_def| FORMULA-DECL NIL |convergence_sequences| |analysis|)
    (|limit| CONST-DECL "real" |convergence_sequences| |analysis|)
    (|convergence_subsequence| FORMULA-DECL NIL |convergence_sequences|
     |analysis|))
   SHOSTAK))
 (|convegent_seq_sort| 0
  (|convegent_seq_sort-1| NIL 3946850146
   ("" (SKEEP)
    (("" (CASE "injective?(a)")
      (("1" (LEMMA "n_eq_perm_bij")
        (("1" (INST -1 "n" "a" "b")
          (("1" (INST 1 "LAMBDA (i: nat): n_eq_perm(n, a, b, i)")
            (("1" (SKEEP)
              (("1" (EXPAND "n_eq_perm" 1)
                (("1" (EXPAND "n_eq_seq_min_idx") (("1" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "n_eq_seq?") (("2" (PROPAX) NIL NIL)) NIL))
            NIL)
           ("2" (EXPAND "n_eq_seq?") (("2" (PROPAX) NIL NIL)) NIL))
          NIL))
        NIL)
       ("2" (HIDE -2 2)
        (("2" (EXPAND "injective?")
          (("2" (SKEEP)
            (("2" (EXPAND "strict_decreasing?")
              (("2" (INST-CP -2 "x1" "x2")
                (("2" (ASSERT)
                  (("2" (INST -2 "x2" "x1") (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) NIL NIL
    (|n_eq_seq?| CONST-DECL "bool" |sequence_extra| NIL) NIL
    (|n_eq_seq_min_idx| CONST-DECL "nat" |sequence_extra| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|n_eq_perm| CONST-DECL "nat" |sequence_extra| NIL)
    (|n_eq_perm_bij| FORMULA-DECL NIL |sequence_extra| NIL)
    (|strict_decreasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK))
 (|sigma_series_ineq| 0
  (|sigma_series_ineq-1| NIL 3945956605
   ("" (SKEEP)
    (("" (LEMMA "convegent_seq_sort")
      (("" (INST -1 "a" "b" "n")
        (("" (PROP)
          (("" (SKEEP)
            (("" (LEMMA "nonneg_series_bij_limit")
              (("" (INST -1 "b" "phi")
                (("" (ASSERT)
                  (("" (REPLACES -1)
                    (("" (LEMMA "limit_series_shift")
                      (("" (INST -1 "b o phi" "n+2")
                        (("" (PROP)
                          (("1" (REPLACES -1)
                            (("1" (EXPAND "sigma" 1 2)
                              (("1" (EXPAND "o ")
                                (("1"
                                  (CASE
                                      "FORALL(k:nat| k <= n): sigma(0, k, a) = sigma[nat](0, k, LAMBDA (x: nat): b(phi(x)))")
                                  (("1" (INST -1 "n")
                                    (("1" (REPLACE -1 1 RL HIDE)
                                      (("1"
                                        (CASE
                                            "limit(series(LAMBDA (n_1: nat): b(phi(2 + n_1 + n)))) >= 0")
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (HIDE 2)
                                          (("2" (LEMMA "limit_nonneg")
                                            (("2"
                                              (INST -1
                                               "series(LAMBDA (n_1: nat): b(phi(2 + n_1 + n)))")
                                              (("1" (PROP)
                                                (("1"
                                                  (LEMMA
                                                   "nonneg_series_bij_conv")
                                                  (("1" (INST -1 "b" "phi")
                                                    (("1" (ASSERT)
                                                      (("1"
                                                        (LEMMA
                                                         "conv_series_shift")
                                                        (("1"
                                                          (INST -1 "2+n"
                                                           "b o phi")
                                                          (("1"
                                                            (REPLACE -1 -2 LR
                                                                     HIDE)
                                                            (("1" (EXPAND "o ")
                                                              (("1" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (HIDE-ALL-BUT 1)
                                                (("2" (SKEEP)
                                                  (("2" (EXPAND "series")
                                                    (("2"
                                                      (REWRITE "sigma_ge_0")
                                                      NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE-ALL-BUT (-1 1))
                                    (("2" (MEASURE-INDUCT "k" "k")
                                      (("2" (SKEEP)
                                        (("2" (CASE-REPLACE "x_1 = 0")
                                          (("1" (HIDE -2)
                                            (("1" (EXPAND "sigma")
                                              (("1" (EXPAND "sigma")
                                                (("1" (INST?) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (INST -1 "x_1 -1")
                                            (("1" (ASSERT)
                                              (("1" (EXPAND "sigma" 2)
                                                (("1" (REPLACES -1)
                                                  (("1" (INST?)
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (ASSERT) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (REWRITE "nonneg_series_bij_conv") NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|convegent_seq_sort| FORMULA-DECL NIL |series_extra| NIL)
    (|nonneg_series_bij_limit| FORMULA-DECL NIL |series_aux| |series|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|limit_series_shift| FORMULA-DECL NIL |series| |series|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL NIL
    NIL (|nonneg_series_bij_conv| FORMULA-DECL NIL |series_aux| |series|)
    (|conv_series_shift| FORMULA-DECL NIL |series| |series|)
    (|sigma_ge_0| FORMULA-DECL NIL |sigma| |reals|)
    (|limit_nonneg| FORMULA-DECL NIL |series_aux| |series|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|limit| CONST-DECL "real" |convergence_sequences| |analysis|) NIL
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (O CONST-DECL "T3" |function_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK)))

