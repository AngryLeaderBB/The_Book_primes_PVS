(|finite_groups_extra|
 (|IMP_finite_groups_TCC1| 0
  (|IMP_finite_groups_TCC1-1| NIL 3939368537
   ("" (LEMMA "fullset_is_group") (("" (PROPAX) NIL NIL)) NIL)
   ((|fullset_is_group| FORMULA-DECL NIL |finite_groups_extra| NIL)) NIL
   (|IMP_finite_groups| ASSUMING
    "algebra@finite_groups[finite_groups_extra.T, finite_groups_extra.*, finite_groups_extra.one].finite_groups"
    "fullset_is_group: ASSUMPTION group_def[finite_groups.T, finite_groups.*, finite_groups.one].group?(sets[finite_groups.T].fullset)")))
 (|period_divides_order_element| 0
  (|period_divides_order_element-1| NIL 3924944381
   ("" (SKEEP)
    (("" (CASE "n=0")
      (("1" (REPLACE -1 1) (("1" (REWRITE " divides_zero") NIL NIL)) NIL)
       ("2" (EXPAND "period")
        (("2" (TYPEPRED "min({n: posnat | a ^ n = one})")
          (("1" (NAME-REPLACE "per" "min({n: posnat | a ^ n = one})")
            (("1" (INST-CP -3 "n")
              (("1" (PROP)
                (("1" (LEMMA "euclid_nat")
                  (("1" (INST -1 "n" "per")
                    (("1" (SKEEP)
                      (("1" (CASE "r = 0")
                        (("1" (HIDE-ALL-BUT (-1 -2 2)) (("1" (GRIND) NIL NIL))
                          NIL)
                         ("2" (REPLACE -1 -6 LR HIDE)
                          (("2" (REWRITE "expt_mult" :DIR RL)
                            (("2" (REWRITE "expt_expt" :DIR RL)
                              (("2" (LEMMA "a_hat_period")
                                (("2" (INST -1 "G" "a")
                                  (("2" (EXPAND "member")
                                    (("2" (EXPAND "period")
                                      (("2" (EXPAND "per" -6)
                                        (("2" (REPLACES -)
                                          (("2" (REWRITE "one_expt")
                                            (("2" (INST -4 "r")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL)
           ("2" (EXPAND "nonempty?")
            (("2" (EXPAND "empty?")
              (("2" (INST -1 "n")
                (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)
                 ("2" (ASSERT) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|divides_zero| FORMULA-DECL NIL |divides| NIL)
    (T FORMAL-NONEMPTY-TYPE-DECL NIL |finite_groups_extra| NIL)
    (* FORMAL-CONST-DECL "[T, T -> T]" |finite_groups_extra| NIL)
    (|one| FORMAL-CONST-DECL "T" |finite_groups_extra| NIL)
    (|finite_group| NONEMPTY-TYPE-EQ-DECL NIL |group| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|finite_group?| CONST-DECL "bool" |group_def| |algebra|)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|period| CONST-DECL "posnat" |finite_groups| |algebra|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|min| CONST-DECL "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
     |min_nat| NIL)
    (^ CONST-DECL "T" |group| |algebra|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|n| SKOLEM-CONST-DECL "nat" |finite_groups_extra| NIL)
    (|euclid_nat| FORMULA-DECL NIL |euclidean_division| NIL)
    (|expt_expt| FORMULA-DECL NIL |group| |algebra|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|r| SKOLEM-CONST-DECL "mod(per)" |finite_groups_extra| NIL)
    (|a| SKOLEM-CONST-DECL "(G)" |finite_groups_extra| NIL)
    (G SKOLEM-CONST-DECL "finite_group[T, *, one]" |finite_groups_extra| NIL)
    (|one_left| FORMULA-DECL NIL |group| |algebra|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|one_expt| FORMULA-DECL NIL |group| |algebra|)
    (|per| SKOLEM-CONST-DECL
     "{a_1 | a ^ a_1 = one AND FORALL (x: posnat): a ^ x = one IMPLIES a_1 <= x}"
     |finite_groups_extra| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|a_hat_period| FORMULA-DECL NIL |finite_groups| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|expt_mult| FORMULA-DECL NIL |group| |algebra|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL))
   SHOSTAK)))

