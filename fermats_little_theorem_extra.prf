(|fermats_little_theorem_extra|
 (|fermats_little_theorem2_TCC1| 0
  (|fermats_little_theorem2_TCC1-1| NIL 3934895659 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL
   (|fermats_little_theorem2| SUBTYPE "fermats_little_theorem_extra.p"
    "{i: integers.int | booleans.OR(fermats_little_theorem_extra.k /= 0, reals.>=(i, 0))}")))
 (|fermats_little_theorem2_TCC2| 0
  (|fermats_little_theorem2_TCC2-1| NIL 3934895659 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL
   (|fermats_little_theorem2| SUBTYPE
    "exponentiation.^(fermats_little_theorem_extra.k, fermats_little_theorem_extra.p)"
    "int")))
 (|fermats_little_theorem2_TCC3| 0
  (|fermats_little_theorem2_TCC3-1| NIL 3934895659 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL
   (|fermats_little_theorem2| SUBTYPE "fermats_little_theorem_extra.p"
    "posnat")))
 (|fermats_little_theorem2| 0
  (|fermats_little_theorem2-1| NIL 3934895666
   ("" (SKEEP)
    (("" (LEMMA "fermats_little_theorem")
      (("" (INST -1 "k" "p")
        (("1" (TYPEPRED "p")
          (("1" (SPLIT)
            (("1" (EXPAND "eq_mod")
              (("1" (LEMMA "euclid_int")
                (("1" (INST -1 "p" "k")
                  (("1" (SKEEP)
                    (("1" (NAME-REPLACE "lhs" "k ^ p")
                      (("1" (REPLACES -1)
                        (("1" (EXPAND "lhs")
                          (("1" (SKEEP)
                            (("1"
                              (CASE-REPLACE " k_1 * p + p * q = p * (k_1 + q)")
                              (("1" (HIDE -1)
                                (("1" (LEMMA "rem_def")
                                  (("1" (INST -1 "p" "k ^ p" "r")
                                    (("1" (FLATTEN)
                                      (("1" (HIDE -1)
                                        (("1" (SPLIT)
                                          (("1" (REPLACES -1)
                                            (("1" (REWRITE "rem_sum1" :DIR RL)
                                              (("1" (REWRITE "rem_multiple1")
                                                (("1" (SIMPLIFY)
                                                  (("1" (REWRITE "rem_mod") NIL
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (INST 1 "k_1 + q") NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "prime?")
                    (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (PROPAX) NIL NIL))
            NIL))
          NIL)
         ("2" (TYPEPRED "p")
          (("2" (EXPAND "prime?")
            (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|fermats_little_theorem| FORMULA-DECL NIL |fermats_little_theorem|
     |numbers|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|eq_mod| CONST-DECL "bool" |eq_mod| |numbers|)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|rem_def| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|rem_sum1| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rem_mod| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|rem_multiple1| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|euclid_int| FORMULA-DECL NIL |euclidean_division| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|fermats_little_theorem3_TCC1| 0
  (|fermats_little_theorem3_TCC1-1| NIL 3934896643 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL
   (|fermats_little_theorem3| SUBTYPE
    "((number_fields.-)(fermats_little_theorem_extra.p, 1))"
    "{i: integers.int | booleans.OR(fermats_little_theorem_extra.k /= 0, reals.>=(i, 0))}")))
 (|fermats_little_theorem3_TCC2| 0
  (|fermats_little_theorem3_TCC2-1| NIL 3934896643 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL
   (|fermats_little_theorem3| SUBTYPE
    "exponentiation.^(fermats_little_theorem_extra.k, ((number_fields.-)(fermats_little_theorem_extra.p, 1)))"
    "int")))
 (|fermats_little_theorem3| 0
  (|fermats_little_theorem3-1| NIL 3934896645
   ("" (SKEEP)
    (("" (LEMMA "fermats_little_theorem2")
      (("" (INST -1 "k" "p")
        (("" (EXPAND "^")
          (("" (LIFT-IF)
            (("" (PROP)
              (("1" (NAME-REPLACE "lhs" "rem(p)(expt(k, (p - 1)))")
                (("1" (EXPAND "expt")
                  (("1" (LIFT-IF)
                    (("1" (PROP)
                      (("1" (EXPAND "lhs") (("1" (ASSERT) NIL NIL)) NIL)
                       ("2" (TYPEPRED "p")
                        (("2" (EXPAND "lhs")
                          (("2" (REWRITE "same_remainder")
                            (("2"
                              (CASE-REPLACE
                               "k * expt(k, p - 1) - k = k * ( expt(k, p - 1) -1 )")
                              (("1" (LEMMA "prime_divides_prod")
                                (("1" (INST -1 "p")
                                  (("1" (SPLIT)
                                    (("1" (INST -1 "k" "(expt(k, p - 1) - 1)")
                                      (("1" (SPLIT)
                                        (("1" (PROPAX) NIL NIL)
                                         ("2" (HIDE-ALL-BUT (-1 2))
                                          (("2"
                                            (REWRITE "same_remainder" :DIR RL)
                                            NIL NIL))
                                          NIL)
                                         ("3" (PROPAX) NIL NIL))
                                        NIL))
                                      NIL)
                                     ("2" (PROPAX) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (TYPEPRED "p")
                (("2" (EXPAND "prime?")
                  (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL)
               ("3" (TYPEPRED "p")
                (("3" (EXPAND "prime?")
                  (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL)
               ("4" (TYPEPRED "p")
                (("4" (EXPAND "prime?")
                  (("4" (FLATTEN) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|fermats_little_theorem2| FORMULA-DECL NIL |fermats_little_theorem_extra|
     NIL)
    (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|lhs| SKOLEM-CONST-DECL
     "{r: mod(p) | EXISTS q: expt(k, (p - 1)) = r + p * q}"
     |fermats_little_theorem_extra| NIL)
    (|p| SKOLEM-CONST-DECL "(prime?)" |fermats_little_theorem_extra| NIL)
    (|prime_divides_prod| FORMULA-DECL NIL |primes| |ints|)
    (|same_remainder| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}"
     |modulo_arithmetic| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK)))

